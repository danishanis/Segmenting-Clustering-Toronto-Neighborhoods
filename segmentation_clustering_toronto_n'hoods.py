# -*- coding: utf-8 -*-
"""Segmentation_Clustering_Toronto_N'hoods

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1djw8a1TTucZNHMmizrAd3x0yJMIrmNtS

# **Segmenting & Clustering Neighborhoods in Toronto**

The project includes **scraping the Wikipedia page** for the postal codes of Canada and then **process and clean the data** for the clustering. The clustering is carried out by K Means and the clusters are plotted using the Folium Library. The Boroughs containing the name 'Toronto' in it are first plotted and then clustered and plotted again.

### Installing Packages
"""

!pip install geopy
!pip install beautifulsoup4
!pip install lxml

import numpy as np # library to handle data in a vectorized manner

import pandas as pd # library for data analsysis
pd.set_option('display.max_columns', None)
pd.set_option('display.max_rows', None)

import json # library to handle JSON files

#!conda install -c conda-forge geopy --yes # uncomment this line if you haven't completed the Foursquare API lab
from geopy.geocoders import Nominatim # convert an address into latitude and longitude values

import requests # library to handle requests
import random #random number generation
from pandas.io.json import json_normalize # tranform JSON file into a pandas dataframe
from IPython.display import display_html

# Matplotlib and associated plotting modules
import matplotlib.cm as cm
import matplotlib.colors as colors

# import k-means from clustering stage
from sklearn.cluster import KMeans

#!conda install -c conda-forge folium=0.5.0 --yes # uncomment this line if you haven't completed the Foursquare API lab
import folium # map rendering library
print('Folium Installed')
from bs4 import BeautifulSoup
print('BeautifulSoup Installed')

print('Libraries imported.')

"""## **Part 1: Web Scrapping Data**

Building code to scrape the following Wikipedia page, https://en.wikipedia.org/wiki/List_of_postal_codes_of_Canada:_M, in order to obtain the data that is in the table of postal codes and to transform the data into a pandas dataframe
"""

#Displaying html table

src = requests.get('https://en.wikipedia.org/wiki/List_of_postal_codes_of_Canada:_M').text
soup = BeautifulSoup(src,'lxml')

tab = str(soup.table)
#display_html(tab, raw = True) 

#Converting html table to pandas dataframe
read_tab = pd.read_html(tab)
df = read_tab[0]
df.head()

df.shape

"""## **Part 2: Data Pre-processing**

1. We are to only process the cells that have an assigned boroug and ignore cells with a borough that is *Not assigned*.
2. Combine rows with same postal code area
3. Assigning borough name to neighborhood name if the neighborhood name is not assigned
"""

df.Borough.value_counts()

# Removing rows which don't have borough names assigned
df1 = df[df['Borough'] != 'Not assigned']

#df1.Borough.value_counts()

#Combine rows with same postal code area
df2 = df1.groupby(['Postal Code','Borough'],
                               sort=False).agg(', '.join)
df2.reset_index(inplace=True)

df2.head()

#Assigning borough name to neighborhood name if the neighborhood name is not assigned 
df2['Neighborhood'] = np.where(df2['Neighborhood'] == 'Not assigned',
                               df2['Borough'], df2['Neighborhood'])

df2.shape

"""## **Part 3: Clustering**

Importing csv file containing latitudes and longitudes for Postal Codes in Canada from https://cocl.us/Geospatial_data
"""

coordinates = pd.read_csv('https://cocl.us/Geospatial_data')
coordinates.head()

#Joinig this data set with the previously cleaned postal codes list
df3 = pd.merge(df2, coordinates, on=['Postal Code'])
df3.head()

print('The dataframe has {} boroughs and {} neighborhoods.'.format(
        len(df3['Borough'].unique()),
        df3.shape[0]
    )
)

"""#### **Use geopy library to get the latitude and longitude values of Toronto.**"""

#Creating geographical coordinates for Toronto, ON

address = 'Toronto, ON'

geolocator = Nominatim(user_agent="ny_explorer")
location = geolocator.geocode(address)
latitude = location.latitude
longitude = location.longitude
print('The geograpical coordinate of Toronto are {}, {}.'.format(latitude, longitude))

"""#### **Creating a map of Toronto with the Latitudes & Longitudes**"""

#Creating Map
map_toronto = folium.Map(location = [latitude, longitude], zoom_start=10)

#Adding Markers on to the map
for lat, lng, label in zip(df3['Latitude'],df3['Longitude'],df3['Neighborhood']):
    label = folium.Popup(label, parse_html=True)
    folium.CircleMarker(
        [lat, lng],
        radius=5,
        popup=label,
        color='blue',
        fill=True,
        fill_color='#3186cc',
        fill_opacity=0.7,
        parse_html=False).add_to(map_toronto)  
    
map_toronto

"""### **k-Means to CLuster the Neighborhoods**"""

k = 5 #No. of clusters
toronto_clustering = df3.drop(['Postal Code','Borough','Neighborhood'],1)
kmeans = KMeans(n_clusters = k,random_state=0).fit(toronto_clustering)
kmeans.labels_
df3.insert(0, 'Cluster Labels', kmeans.labels_)
#pr)int(df3.head()

#Creating Map
map_clusters = folium.Map(location = [latitude, longitude], zoom_start=10)

# set color scheme for the clusters
x = np.arange(k)
ys = [i + x + (i*x)**2 for i in range(k)]
colors_array = cm.rainbow(np.linspace(0, 1, len(ys)))
rainbow = [colors.rgb2hex(i) for i in colors_array]

# add markers to the map
markers_colors = []
for lat, lon, neighborhood, cluster in zip(df3['Latitude'],
                                           df3['Longitude'],
                                           df3['Neighborhood'],
                                           df3['Cluster Labels']):
  
    label = folium.Popup(' Cluster ' + str(cluster), parse_html=True)
    folium.CircleMarker(
        [lat, lon],
        radius=5,
        popup=label,
        color=rainbow[cluster-1],
        fill=True,
        fill_color=rainbow[cluster-1],
        fill_opacity=0.7).add_to(map_clusters)
       
map_clusters

